-这种问题第一反应是用一个哈希表作为查找表可以获得常数查找时间并获得总的O(n)的时间复杂度，但根据题目意思需要O(1)的空间复杂度，而哈希表存储的是major number，相当于O(n)的空间复杂度了，但实际操作符合要求，就是性能很低，我也不知道是怎么回事，应该有更好的方法。
-这是个经典的多数投票问题。众所周知，出现次数超过1/3总长度的数字最多只能有两个，所以找到数组中出现次数最多的两个数字并判断是否超过1/3即可。
-思路按照https://www.cnblogs.com/andy-0212/p/10420876.html，但里面有两个坑
--1. 对于1/3情况，在第一次循环的计数时考虑major num出现次数只需超过1/3，则在累计计数时应+2，减数时依然-1。然而这样做如果计数只有两个的话会导致部分处在被扫描范围内的major num被覆盖掉，例如3，3，3，3，2，2，2，1，1，1，1，仅有的两个计数变量分别为3和2时，1会被2覆盖掉，分析可知只需再增加一个计数变量即是用3个计数变量即可，因为2最多只能覆盖1个major num。