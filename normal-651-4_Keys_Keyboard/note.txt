这是一道很好的题，非常典型的动态规划题型。

起初考虑到状态有限且状态之间的转移也明确，可以明确地写成树的形式，所以考虑广度优先搜索（或深度优先搜索）。算法本身没有问题，但最终运行超时，所以考虑搜索中存在大量重复计算。

于是考虑优化，广度优先搜索中的一些计算结果可以复用，于是根据状态转移写出了一个贪心法的状态转移方程，写成了贪心算法形式。运行后当N比较小的时候成立，但N增大后某些情况出错了，于是重新审视状态转移方程，认为三个方程中后两个没有问题，问题出在l[s] = max(l[s-1]+buffer, ...)这个，因为l[s-1]+buffer可有多种组合，需要全部考虑到。

于是进一步分析，发现buffer一定是某一个s下的l[s]，且是连续的，即l[s_now] = n * l[s]，其中l[s]一定是由一次完整的复制粘贴形成的，且n和s与s_now有关系，这种情况下因为l[s]前后的buffer不同了，所以不需要考虑l[s]+buffer组合问题了，因为复制粘贴后的buffer是其自身且一定大于之前的buffer，故直接考虑当前s下的最大l[s]，并且三个状态转移方程可以直接合并为一个。于是改写状态转移方程（见图），并最终形成了动态规划框架。