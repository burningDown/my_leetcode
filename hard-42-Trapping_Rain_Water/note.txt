我最开始想到的是一层一层遍历计算水，显然这样是超时的，时间复杂度O(n*max(height))。

后来尝试优化，采用一个栈存储遍历扫过的次高点，即单调栈思路，当当前点高于栈顶则可形成一个池，水量由两边界中较低的一方与池中次高的墙决定，循环遍历栈直到栈顶低于当前墙，然后重复这个过程，时间复杂度O(n)，空间复杂度O(n)。

查看题解后，发现另一种思路：其实看到这种题第一反应是遍历height然后累加每个墙与前一个墙的高度差，这样做的主要问题在于如何保证池的右边墙一定大于左边墙从而形成一个池，于是可以先遍历找到最高的墙，然后分别由左和由右遍历；或者进一步考虑，我们并不需要找到最高的墙，只需要保证另一边的墙高于当前边的墙就好了，于是可以采用双指针分别由左向右和由右向左遍历，当两边墙的大小关系改变时改变遍历顺序，时间复杂度O(n)，空间复杂度O(1)。