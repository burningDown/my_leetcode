这题也是师兄之前提到的动态规划问题的一个例子。


看到这题首先想到了积分图，这样就可以在常数时间内求出任意子矩阵的和；

至于如何找最大子矩阵，我先尝试了直接暴力搜索，即遍历子矩阵左上点和右下点，找到和最大的子矩阵，时间复杂度O((mn)^2)，显然会超时；

于是考虑优化，思考直接暴力搜索过程中存在的重复计算的部分，发现一种情况：我们很难直接利用某一点的和值，即假设当前固定了子矩阵左上点后我们求到了当前最大的右下坐标，但当左上坐标改变后右下坐标未必是当前子矩阵的最大点，因为左上点移动后，求和时原子矩阵的左列和上列会增加或减小，而增加或减小的一列里个数值的大小并没有相关性，从而使得当前右下点不一定是最大点。但当我们固定其中的一个方向的时候，仅考虑另一个方向上的区间收缩与拉伸则不受影响，从而转化为滑动区间的最大子序列和问题，时间复杂度省掉一个维度，变为O(m^2n)或O(mn^2)。